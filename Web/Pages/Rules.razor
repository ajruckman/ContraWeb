@using Web.Services
@using Superset.Web.State
@using Blazored.SessionStorage
@using FT3
@using FT3.Component
@using Infrastructure.Schema
@using Microsoft.AspNetCore.Http
@using Superset.Web.Validation

@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@inject ISessionStorageService SessionStorageService
@inject LogActionService LogActionService

@page "/rules"

<div class="Rules_NewWhitelistContainer">

@{
    Console.WriteLine("<- " + Whitelist().Expires + " ->");
}

<div class="InputsContainer">
<h2>Create a whitelist rule</h2>
<table class="Inputs">
<tr>
    <td>
        <label for="NewWhitelist_Pattern">Pattern</label>
    </td>
    <td>
        <input @oninput="@OnPatternChange" value="@Whitelist().Pattern" id="NewWhitelist_Pattern" type="text" class="SS_Input SS_Input--WidthWide" disabled="@_processing"/>
    </td>
</tr>
<tr>
    <td></td>
    <td>
        <div class="VerticallyCenteredContainer">
            @if (!_processing)
            {
                @(_validator!.RenderFieldResults("Pattern"))
            }
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label for="NewWhitelist_ExpiresDate">Expires</label>
    </td>
    <td>
        @{
            Console.WriteLine("== " + ExpiresTimeString);
        }
        <TriggerWrapper Trigger="@_onInputReset" Protected="true">
            <input type="date" @oninput="@OnExpiresDateChange" value="@ExpiresDateString" class="SS_Input" disabled="@_processing" id="NewWhitelist_ExpiresDate"/>
        </TriggerWrapper>
        at
        <TriggerWrapper Trigger="@_onInputReset" Protected="true">
            <input type="time" @oninput="@OnExpiresTimeChange" value="@ExpiresTimeString" class="SS_Input" disabled="@_processing"/>
        </TriggerWrapper>
    </td>
</tr>
<tr>
    <td></td>
    <td>
        <div class="ExpirationDateFuturesContainer">
            <label>In</label>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromHours(1)))" disabled="@_processing">1 hour</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromHours(6)))" disabled="@_processing">6 hours</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromHours(12)))" disabled="@_processing">12 hours</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromDays(1)))" disabled="@_processing">1 day</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromDays(3)))" disabled="@_processing">3 day</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromDays(7)))" disabled="@_processing">7 days</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.Zero))" disabled="@_processing">Never</button>
        </div>
    </td>
</tr>
<tr>
    <td></td>
    <td>
        <div class="VerticallyCenteredContainer">
            @if (!_processing)
            {
                @(_validator!.RenderFieldResults("Expires"))
@*                 @if (_whitelistController.IsExpiresValid.HasValue) *@
@*                 { *@
@*                     if (_whitelistController.IsExpiresValid == true) *@
@*                     { *@
@*                         <div class="CheckMark"></div> *@
@*                         <span>Expiration time is valid</span> *@
@*                     } *@
@*                     else *@
@*                     { *@
@*                         <div class="XMark"></div> *@
@*                         <span>@_whitelistController.ExpiresInvalidReason</span> *@
@*                     } *@
@*                 } *@
@*                 else *@
@*                 { *@
@*                     <div class="CheckMark"></div> *@
@*                     <span>Rule will not expire</span> *@
@*                 } *@
            }
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td colspan="2">
        <h3>Whitelist this pattern if clients match 1 or more of the following:</h3>
    </td>
</tr>

@if (!AllowCreateRuleForOthers())
{
    <tr>
        <td colspan="2">
            <div class="VerticallyCenteredContainer PermissionNoticeContainer">
                <div class="SS_ExclamationMark"></div>
                <div>You are only permitted to create whitelist rules for your own IP.</div>
            </div>
        </td>
    </tr>
}

<tr>
    <td>
        <label>IPs</label>
    </td>
    <td>
        @(_newIPsList!.Render())
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label>Subnets</label>
    </td>
    <td>
        @(_newSubnetsList!.Render())
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label>Hostnames</label>
    </td>
    <td>
        @(_newHostnameList!.Render())
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label>Vendors</label>
    </td>
    <td>
        <div class="VendorSelectorContainer">
            <TriggerWrapper Trigger="@_onPostLoad">
                @if (!_doPostLoad)
                {
                    <div class="VerticallyCenteredContainer">
                        <div class="Spinner"></div>
                        <span>Loading...</span>
                    </div>
                }
                else
                {
                    @(_vendorSelector!.Render())
                }
            </TriggerWrapper>
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td></td>
    <td>
        <div class="SubmitWrapper">
            <TriggerWrapper Trigger="@_onInputValidation">
                <button @onclick="@Commit" disabled="@(_overallValidator!.AnyOfType(ValidationResult.Invalid, true))" class="SS_Button SS_Button--Green">COMMIT</button>

                @if (!_processing)
                {
                    @(_overallValidator!.RenderOverallResults())
                }
                else
                {
                    <div class="VerticallyCenteredContainer">
                        <div class="Spinner"></div>
                        <span>Processing...</span>
                    </div>
                }
            </TriggerWrapper>
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

</table>
</div>

@* <TriggerWrapper Trigger="@_onReloadMessage"> *@
@*     @if (_justReloaded) *@
@*     { *@
@*         <div class="StatusContainer"> *@
@*             <h3>Whitelist rule reload status</h3> *@
@*             @foreach (string message in _reloadMessages) *@
@*             { *@
@*                 <span>@message</span> *@
@*             } *@
@*         </div> *@
@*     } *@
@* </TriggerWrapper> *@
</div>

<div class="Rules_WhitelistTableContainer">

    <div class="HeaderContainer">
        <h2>Existing rules</h2>
        @* <button class="SS_Button--Blue" @onclick="@ReloadWhitelist">RELOAD WHITELIST CACHE</button> *@
    </div>

    <FlareTableContainer FlareTable="@_whitelistTable">

        <FlareTableControlRow>
            <FlareTableColumnToggles T="Whitelist"/>
            <FlareTableControlSpacer/>
            <FlareTableResetButton T="Whitelist"/>
            <FlareTableControlFiller/>
            <FlareTableRegexToggle T="Whitelist"/>
        </FlareTableControlRow>

        <FlareTableControlRow>
            <FlareTablePaginationSize T="Whitelist"/>
            <FlareTableControlFiller/>
            <FlareTablePaginationButtons T="Whitelist" ID="1"/>
        </FlareTableControlRow>
        <FlareTableTable>
            <FlareTableHead>
                <FlareTableHeadingRow>
                    @foreach (Column column in _whitelistTable!.Columns)
                    {
                        <FlareTableHeading T="Whitelist" ID="@column.ID"/>
                    }
                </FlareTableHeadingRow>
                <FlareTableFilterRow>
                    @foreach (Column column in _whitelistTable!.Columns)
                    {
                        <FlareTableFilter T="Whitelist" ID="@column.ID"/>
                    }
                </FlareTableFilterRow>
            </FlareTableHead>
            <FlareTableBody T="Whitelist">
                @foreach (Whitelist row in _whitelistTable!.Rows())
                {
                    <FlareTableBodyRow T="Whitelist" Value="@row">
                        <FlareTableCell T="Whitelist" ID="ID">@row.ID</FlareTableCell>
                        <FlareTableCell T="Whitelist" ID="Pattern">@row.Pattern</FlareTableCell>
                        <FlareTableCell T="Whitelist" ID="Expires">@(row.Expires.HasValue ? row.Expires.Value.ToString("yyyy-MM-dd HH:mm") : "")</FlareTableCell>

                        @* <FlareTableCell T="Whitelist" ID="_Edit"> *@
                        @* <button class="SS_Button--Blue" @onclick="@(_ => Edit(row))" disabled="@(_editing != null || _processing)">EDIT</button> *@
                        @* </FlareTableCell> *@
                        <FlareTableCell T="Whitelist" ID="_Remove">
                            <button class="SS_Button--Red" @onclick="@(_ => Remove(row))" disabled="@_processing">REMOVE</button>
                        </FlareTableCell>
                    </FlareTableBodyRow>
                }
            </FlareTableBody>
        </FlareTableTable>

        <FlareTableControlRow>
            <FlareTablePaginationInfo T="Whitelist"/>
            <FlareTableControlFiller/>
            <FlareTablePaginationButtons T="Whitelist" ID="2"/>
        </FlareTableControlRow>


    </FlareTableContainer>

</div>