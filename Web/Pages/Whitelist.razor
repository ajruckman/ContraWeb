@using Web.Services
@using Superset.Web.State
@using Blazored.SessionStorage
@using FlareTables
@using FlareTables.Component
@using Infrastructure.Schema
@using Microsoft.AspNetCore.Http
@using Superset.Web.Validation

@inject IJSRuntime JSRuntime
@inject ISessionStorageService SessionStorageService
@inject LogActionService LogActionService

@page "/whitelist"

@_ruleSubheader.Render()

<div class="Rules_NewWhitelistContainer">

<div class="InputsContainer">

<table class="InputTable">
<tr>
    <td>
        <label for="NewWhitelist_Pattern">Pattern</label>
    </td>
    <td>
        <input @oninput="@OnPatternChange" value="@Rule().Pattern" id="NewWhitelist_Pattern" type="text" class="SS_Input SS_Input--WidthWide" disabled="@_processing"/>
    </td>
</tr>
<tr>
    <td></td>
    <td>
        <div class="VerticallyCenteredContainer">
            @if (!_processing)
            {
                @(_validator!.RenderFieldResults("Pattern"))
            }
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label for="NewWhitelist_ExpiresDate">Expires</label>
    </td>
    <td>
        @{
            Console.WriteLine("== " + ExpiresTimeString);
        }
        <TriggerWrapper Trigger="@_onInputReset" Protected="true">
            <input type="date" @oninput="@OnExpiresDateChange" value="@ExpiresDateString" class="SS_Input" disabled="@_processing" id="NewWhitelist_ExpiresDate"/>
        </TriggerWrapper>
        at
        <TriggerWrapper Trigger="@_onInputReset" Protected="true">
            <input type="time" @oninput="@OnExpiresTimeChange" value="@ExpiresTimeString" class="SS_Input" disabled="@_processing"/>
        </TriggerWrapper>
    </td>
</tr>
<tr>
    <td></td>
    <td>
        <div class="ExpirationDateFuturesContainer">
            <label>In</label>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromHours(1)))" disabled="@_processing">1 hour</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromHours(6)))" disabled="@_processing">6 hours</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromHours(12)))" disabled="@_processing">12 hours</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromDays(1)))" disabled="@_processing">1 day</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromDays(3)))" disabled="@_processing">3 day</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.FromDays(7)))" disabled="@_processing">7 days</button>
            <button class="SS_Button" @onclick="@(_ => SetExpirationAfterTimespan(TimeSpan.Zero))" disabled="@_processing">Never</button>
        </div>
    </td>
</tr>
<tr>
    <td></td>
    <td>
        <div class="VerticallyCenteredContainer">
            @if (!_processing)
            {
                @(_validator!.RenderFieldResults("Expires"))
            }
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td colspan="2">
        <h3>Whitelist this pattern if clients match 1 or more of the following:</h3>
    </td>
</tr>

@if (!AllowCreateRuleForOthers())
{
    <tr>
        <td colspan="2">
            <div class="VerticallyCenteredContainer PermissionNoticeContainer">
                <div class="SS_ExclamationMark"></div>
                <div>You are only permitted to create whitelist rules for your own IP.</div>
            </div>
        </td>
    </tr>
}

<tr>
    <td>
        <label>IPs</label>
    </td>
    <td>
        @if (!_editing)
        {
            @(_newIPsList!.Render())
        }
        else
        {
            @(_editIPsList!.Render())
        }
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label>Subnets</label>
    </td>
    <td>
        @if (!_editing)
        {
            @(_newSubnetsList!.Render())
        }
        else
        {
            @(_editSubnetsList!.Render())
        }
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label>Hostnames</label>
    </td>
    <td>
        @if (!_editing)
        {
            @(_newHostnameList!.Render())
        }
        else
        {
            @(_editHostnameList!.Render())
        }
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label>MAC addresses</label>
    </td>
    <td>
        @if (!_editing)
        {
            @(_newMACsList!.Render())
        }
        else
        {
            @(_editMACsList!.Render())
        }
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td>
        <label>Vendors</label>
    </td>
    <td>
        <div class="VendorSelectorContainer">
            <TriggerWrapper Trigger="@_onPostLoad">
                @if (!_doPostLoad)
                {
                    <div class="VerticallyCenteredContainer">
                        <div class="Spinner"></div>
                        <span>Loading...</span>
                    </div>
                }
                else
                {
                    @(_vendorSelector!.Render())
                }
            </TriggerWrapper>
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

<tr>
    <td></td>
    <td>
        <div class="SubmitWrapper">
            <TriggerWrapper Trigger="@_onInputValidation">
                <button @onclick="@Commit" disabled="@(_overallValidator!.AnyOfType(ValidationResult.Invalid, true))" class="SS_Button SS_Button--Green">COMMIT</button>

                @if (!_processing)
                {
                    @(_overallValidator!.RenderOverallResults())
                }
                else
                {
                    <div class="VerticallyCenteredContainer">
                        <div class="Spinner"></div>
                        <span>Processing...</span>
                    </div>
                }
            </TriggerWrapper>
        </div>
    </td>
</tr>

<tr>
    <td class="Spacer" colspan="2"></td>
</tr>

</table>
</div>
</div>

<br>

@_listSubheader.Render()

<div class="Rules_WhitelistTableContainer">

    <TriggerWrapper Trigger="@_onRowChange" Protected="true">
    
    <FlareTableContainer FlareTable="@_whitelistTable">

        <FlareTableControlRow>
            <FlareTableColumnToggles T="Infrastructure.Schema.Whitelist"/>
            <FlareTableControlSpacer/>
            <FlareTableResetButton T="Infrastructure.Schema.Whitelist"/>
            <FlareTableControlFiller/>
            <FlareTableRegexToggle T="Infrastructure.Schema.Whitelist"/>
        </FlareTableControlRow>

        <FlareTableControlRow>
            <FlareTablePaginationSize T="Infrastructure.Schema.Whitelist"/>
            <FlareTableControlFiller/>
            <FlareTablePaginationButtons T="Infrastructure.Schema.Whitelist" ID="1"/>
        </FlareTableControlRow>
        <FlareTableTable>
            <FlareTableHead>
                <FlareTableHeadingRow>
                    @foreach (Column column in _whitelistTable!.Columns)
                    {
                        <FlareTableHeading T="Infrastructure.Schema.Whitelist" ID="@column.ID"/>
                    }
                </FlareTableHeadingRow>
                <FlareTableFilterRow>
                    @foreach (Column column in _whitelistTable!.Columns)
                    {
                        <FlareTableFilter T="Infrastructure.Schema.Whitelist" ID="@column.ID"/>
                    }
                </FlareTableFilterRow>
            </FlareTableHead>
            <FlareTableBody T="Infrastructure.Schema.Whitelist">
                @foreach (Infrastructure.Schema.Whitelist row in _whitelistTable!.Rows())
                {
                    <FlareTableBodyRow T="Infrastructure.Schema.Whitelist" Value="@row">
                        <FlareTableCell T="Infrastructure.Schema.Whitelist" ID="ID">@row.ID</FlareTableCell>
                        <FlareTableCell T="Infrastructure.Schema.Whitelist" ID="Pattern">@row.Pattern</FlareTableCell>
                        <FlareTableCell T="Infrastructure.Schema.Whitelist" ID="Expires">@(row.Expires.HasValue ? row.Expires.Value.ToString("yyyy-MM-dd HH:mm") : "")</FlareTableCell>

                        <FlareTableCell T="Infrastructure.Schema.Whitelist" ID="_Edit">
                            <button class="SS_Button--Blue" @onclick="@(_ => Edit(row))" disabled="@(_editing || _processing || !_doPostLoad)">EDIT</button>
                        </FlareTableCell>
                        <FlareTableCell T="Infrastructure.Schema.Whitelist" ID="_Remove">
                            <button class="SS_Button--Red" @onclick="@(_ => Remove(row))" disabled="@_processing">REMOVE</button>
                        </FlareTableCell>
                    </FlareTableBodyRow>
                }
            </FlareTableBody>
        </FlareTableTable>

        <FlareTableControlRow>
            <FlareTablePaginationInfo T="Infrastructure.Schema.Whitelist"/>
            <FlareTableControlFiller/>
            <FlareTablePaginationButtons T="Infrastructure.Schema.Whitelist" ID="2"/>
        </FlareTableControlRow>


    </FlareTableContainer>
    </TriggerWrapper>
</div>